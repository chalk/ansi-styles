/** Declaration file generated by dts-gen */

import * as colorConvert from 'color-convert';

declare namespace ansiStyles {
	declare interface CSIPair {
		open: string;
		close: string;
	}

	declare interface ColorBase {
		ansi: typeof colorConvert;
		ansi256: typeof colorConvert;
		ansi16m: typeof colorConvert;

		close: string;
	}

	declare interface Modifier {
		bold: CSIPair;
		dim: CSIPair;
		hidden: CSIPair;
		inverse: CSIPair;
		italic: CSIPair;
		reset: CSIPair;
		strikethrough: CSIPair;
		underline: CSIPair;
	}

	declare interface ForegroundColor {
		black: CSIPair;
		red: CSIPair;
		green: CSIPair;
		yellow: CSIPair;
		blue: CSIPair;
		cyan: CSIPair;
		magenta: CSIPair;
		white: CSIPair;

		gray: CSIPair;
		grey: CSIPair;

		blackBright: CSIPair;
		redBright: CSIPair;
		greenBright: CSIPair;
		yellowBright: CSIPair;
		blueBright: CSIPair;
		cyanBright: CSIPair;
		magentaBright: CSIPair;
		whiteBright: CSIPair;
	}

	declare interface BackgroundColor {
		bgBlack: CSIPair;
		bgRed: CSIPair;
		bgGreen: CSIPair;
		bgYellow: CSIPair;
		bgBlue: CSIPair;
		bgCyan: CSIPair;
		bgMagenta: CSIPair;
		bgWhite: CSIPair;

		bgGray: CSIPair;
		bgGrey: CSIPair;

		bgBlackBright: CSIPair;
		bgRedBright: CSIPair;
		bgGreenBright: CSIPair;
		bgYellowBright: CSIPair;
		bgBlueBright: CSIPair;
		bgCyanBright: CSIPair;
		bgMagentaBright: CSIPair;
		bgWhiteBright: CSIPair;
	}
}

declare const ansiStyles: {
	modifier: ansiStyles.Modifier;
	color: ansiStyles.ForegroundColor & ansiStyles.ColorBase;
	bgColor: ansiStyles.BackgroundColor & ansiStyles.ColorBase;
	codes: Map<number, number>;
} & ansiStyles.BackgroundColor & ansiStyles.ForegroundColor & ansiStyles.Modifier;

export = ansiStyles;
